<?php

/**
 * Base_Order
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property enum $status
 * @property enum $payment_status
 * @property boolean $approved
 * @property decimal $subtotal
 * @property decimal $shipping
 * @property decimal $tax
 * @property decimal $total
 * @property string $email
 * @property integer $user_id
 * @property string $ip
 * @property enum $mode
 * @property Transaction $Transactions
 * @property OrderedItem $Items
 * @property User $User
 * @property BillingAddress $BillingInfo
 * @property ShippingAddress $ShippingInfo
 * 
 * @package    SimpleCart
 * @subpackage Models
 * @author     Jonathan Bernardi <spekkionu@gmail.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class Base_Order extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('order');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'unsigned' => true,
             'autoincrement' => true,
             'length' => '4',
             ));
        $this->hasColumn('status', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'new',
              1 => 'incomplete',
              2 => 'pending',
              3 => 'cancelled',
              4 => 'complete',
              5 => 'declined',
              6 => 'error',
             ),
             'default' => 'incomplete',
             'notnull' => true,
             'notblank' => true,
             ));
        $this->hasColumn('payment_status', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'complete',
              1 => 'denied',
              2 => 'pending',
              3 => 'cancelled',
             ),
             ));
        $this->hasColumn('approved', 'boolean', null, array(
             'type' => 'boolean',
             'unsigned' => true,
             ));
        $this->hasColumn('subtotal', 'decimal', 8, array(
             'type' => 'decimal',
             'length' => 8,
             'scale' => 2,
             'notnull' => true,
             'notblank' => true,
             'unsigned' => true,
             ));
        $this->hasColumn('shipping', 'decimal', 8, array(
             'type' => 'decimal',
             'length' => 8,
             'scale' => 2,
             'notnull' => true,
             'notblank' => true,
             'unsigned' => true,
             ));
        $this->hasColumn('tax', 'decimal', 8, array(
             'type' => 'decimal',
             'length' => 8,
             'scale' => 2,
             'notnull' => true,
             'notblank' => true,
             'unsigned' => true,
             ));
        $this->hasColumn('total', 'decimal', 8, array(
             'type' => 'decimal',
             'length' => 8,
             'scale' => 2,
             'notnull' => true,
             'notblank' => true,
             'unsigned' => true,
             ));
        $this->hasColumn('email', 'string', 127, array(
             'type' => 'string',
             'email' => true,
             'length' => '127',
             ));
        $this->hasColumn('user_id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'length' => '4',
             ));
        $this->hasColumn('ip', 'string', 15, array(
             'type' => 'string',
             'ip' => true,
             'length' => '15',
             ));
        $this->hasColumn('mode', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'live',
              1 => 'test',
             ),
             'default' => 'test',
             'notnull' => true,
             'notblank' => true,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Transaction as Transactions', array(
             'local' => 'id',
             'foreign' => 'order_id'));

        $this->hasOne('OrderedItem as Items', array(
             'local' => 'id',
             'foreign' => 'order_id'));

        $this->hasOne('User', array(
             'local' => 'user_id',
             'foreign' => 'id',
             'owningSide' => true));

        $this->hasOne('BillingAddress as BillingInfo', array(
             'local' => 'id',
             'foreign' => 'order_id'));

        $this->hasOne('ShippingAddress as ShippingInfo', array(
             'local' => 'id',
             'foreign' => 'order_id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             'created' => 
             array(
              'name' => 'orderdate',
              'type' => 'timestamp',
             ),
             'updated' => 
             array(
              'disabled' => true,
             ),
             ));
        $this->actAs($timestampable0);
    }
}